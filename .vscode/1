#include <stdio.h>
#include <stdlib.h>

// 二叉树节点的定义
struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
};

// 创建一个新的二叉树节点
struct TreeNode* createNode(int data) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    if (newNode == NULL) {
        fprintf(stderr, "内存分配失败\n");
        exit(1);
    }
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// 计算二叉树叶子节点数的递归函数
int countLeaves(struct TreeNode* root) {
    if (root == NULL) {
        return 0;
    }
    if (root->left == NULL && root->right == NULL) {
        // 如果是叶子节点
        return 1;
    } else {
        // 递归地统计左子树和右子树的叶子节点数
        int leftLeaves = countLeaves(root->left);
        int rightLeaves = countLeaves(root->right);
        return leftLeaves + rightLeaves;
    }
}

int main() {
    // 创建一个示例二叉树
    struct TreeNode* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);
    root->right->left = createNode(6);
    root->right->right = createNode(7);
    root->left->left->right = createNode(4);
    root->left->right = createNode(4);
    root->right->left->right = createNode(6);

    // 计算叶子节点数
    int leaves = countLeaves(root);
    printf("二叉树的叶子节点数为: %d\n", leaves);
    return 0;
}
